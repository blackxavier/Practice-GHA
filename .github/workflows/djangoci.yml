name: CI/CD for django sample app

on:
  push:
    branches:
      - main
      - "feature/*"
  workflow_dispatch:

jobs:
  Linting:
    runs-on: ${{ matrix.os }}

    container: python:3.9

    services:
      postgres:
        image: postgres:latest
        ports:
          - 5432:5432
        env:
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}

        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    env:
      DATABASE_URL: postgres://${{ secrets.POSTGRES_USER }}:${{ secrets.POSTGRES_PASSWORD }}@localhost:5432/${{ secrets.POSTGRES_DB }}

    strategy:
      matrix:
        os: ["ubuntu-20.04", "ubuntu-22.04"]
    steps:
      - name: checkout code
        uses: actions/checkout@v4

      # - name: Set up Python ${{ matrix.os }}
      #   uses: actions/setup-python@v5
      #   with:
      #     python-version: ${{ matrix.os }}

      - name: Cache Python packages ${{ matrix.os }}
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          python manage.py makemigrations
          python manage.py migrate

      - name: Lint with flake8
        run: flake8

      - name: Run tests with coverage
        env:
          DATABASE_URL: postgres://${{ secrets.POSTGRES_USER }}:${{ secrets.POSTGRES_PASSWORD }}@localhost:5432/${{ secrets.POSTGRES_DB }}

        run: |
          pip install coverage
          coverage run manage.py test
          python manage.py test
          coverage report
          coverage xml

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.os }}-coverage-report
          path: coverage.xml

      - name: Generate HTML report
        run: coverage html

      - name: Upload HTML report
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.os }}-coverage-html-report
          path: htmlcov

  build:
    name: Docker Login
    needs: [Linting]
    runs-on: ubuntu-latest
    permissions:
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Dockerhub Login
        uses: docker/login-action@v3
        with:
          registry: docker.io
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}

      - name: GHCR Login
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Image to Docker Hub
        uses: docker/build-push-action@v6
        with:
          context: .
          # load: true
          push: true
          file: Dockerfile
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/practice-gha-app:${{ github.sha }}

      - name: Build Image to GHCR
        uses: docker/build-push-action@v6
        with:
          context: .
          # load: true
          push: true
          tags: ghcr.io/${{ github.repository_owner }}/practice-gha-app:${{ github.sha }}
          # cache-from: type=local,src=/tmp/.buildx-cache
          # cache-to: type=local,dest=/tmp/.buildx-cache

      - name: Build and Test
        run: |
          docker images
          docker run --name web -p 8000:8000 -d --rm ${{ secrets.DOCKER_HUB_USERNAME }}/practice-gha-app:${{ github.sha }}
          wget -O - http://127.0.0.1:8000/live

      # curl 127.0.0.1:8000
      # wget -q -O 127.0.0.1:8000/live | grep live

      # - name: Run tests in Docker container
      #   run: |
      #     docker images
      #     docker run --rm ${{ secrets.DOCKER_HUB_USERNAME }}/practice-gha-app:latest python manage.py test
      # - name: Run container and test page
      #   run: |
      #     docker run -d -p 8000:8000 -e \
      #     POSTGRES_DB=test_db POSTGRES_USER=postgres POSTGRES_PASSWORD=postgres \
      #      ${{ secrets.DOCKER_HUB_USERNAME }}/practice-gha-app:latest
      #     curl 127.0.0.1:8000/live

# POSTGRES_DB: test_db
#           POSTGRES_USER: postgres
#           POSTGRES_PASSWORD: postgres
# docker logs -t --tail 10 web
# docker ps
# echo testing image with wget
